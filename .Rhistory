replacement = "-",
x = colnames(plage_output_df))
colnames(plage_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(plage_output_df))
# Perform t-tests for each gene
plage_t_test <- data.frame(t(apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
print(class(t_test_result))
return(c(t_test_result$statistic, t_test_result$p.value))
})))
# Perform t-tests for each gene
plage_t_test <- data.frame(t(apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
print(class(t_test_result))
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(plage_t_test) <- c("statistic", "p.value")
plage_t_test$statistic.abs <- abs(plage_t_test$statistic)
plage_t_test$adj.p.value <- p.adjust(plage_t_test$p.value,
method = "fdr")
plage_t_test <- plage_t_test[order(plage_t_test$statistic.abs, decreasing = T),]
View(plage_t_test)
length(which(plage_t_test$adj.p.value < 0.05))
gsva_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
colnames(gsva_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(gsva_output_df))
colnames(gsva_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(gsva_output_df))
gsva_heatmap <- pheatmap(gsva_output_df,
annotation_col = condition,
annotation_colors = condition_colors,
color = pal,
breaks = myBreaks,
border_color = "NA")
# Perform t-tests for each gene
gsva_t_test <- data.frame(t(apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
print(class(t_test_result))
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(gsva_t_test) <- c("statistic", "p.value")
gsva_t_test$statistic.abs <- abs(gsva_t_test$statistic)
gsva_t_test$adj.p.value <- p.adjust(gsva_t_test$p.value,
method = "fdr")
gsva_t_test <- gsva_t_test[order(gsva_t_test$statistic.abs, decreasing = T),]
length(which(gsva_t_test$adj.p.value < 0.05))
ssgsea_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
colnames(ssgsea_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(ssgsea_output_df))
colnames(ssgsea_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(ssgsea_output_df))
# Perform t-tests for each gene
ssgsea_t_test <- data.frame(t(apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(ssgsea_t_test) <- c("statistic", "p.value")
ssgsea_t_test$statistic.abs <- abs(ssgsea_t_test$statistic)
ssgsea_t_test$adj.p.value <- p.adjust(ssgsea_t_test$p.value,
method = "fdr")
ssgsea_t_test <- ssgsea_t_test[order(ssgsea_t_test$statistic.abs, decreasing = T),]
length(ssgsea_t_test$adj.p.value < 0.05])
length(which(ssgsea_t_test$adj.p.value < 0.05]))
length(which(ssgsea_t_test$adj.p.value < 0.05))
View(ssgsea_t_test)
zscore_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
colnames(zscore_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(zscore_output_df))
colnames(zscore_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(zscore_output_df))
# Perform t-tests for each gene
zscore_t_test <- data.frame(t(apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(zscore_t_test) <- c("statistic", "p.value")
zscore_t_test$statistic.abs <- abs(zscore_t_test$statistic)
zscore_t_test$adj.p.value <- p.adjust(zscore_t_test$p.value,
method = "fdr")
zscore_t_test <- zscore_t_test[order(zscore_t_test$statistic.abs, decreasing = T),]
length(length([zscore_t_test$adj.p.value < 0.05))
length(length(zscore_t_test$adj.p.value < 0.05))
View(zscore_t_test)
length(which(zscore_t_test$adj.p.value < 0.05))
rROMA_output_df <- read.table(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/rROMA_output_SampleMatrix_2023_09_19.csv",
sep = "\t")
colnames(rROMA_output_df) <- sapply(colnames(rROMA_output_df), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(rROMA_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(rROMA_output_df))
colnames(rROMA_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(rROMA_output_df))
rROMA_t_test <- data.frame(t(apply(X = rROMA_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(rROMA_t_test) <- c("statistic", "p.value")
rROMA_t_test$statistic.abs <- abs(rROMA_t_test$statistic)
rROMA_t_test$adj.p.value <- p.adjust(rROMA_t_test$p.value,
method = "fdr")
rROMA_t_test <- rROMA_t_test[order(rROMA_t_test$statistic.abs, decreasing = T),]
length(which(rROMA_t_test$adj.p.value<0.05))
View(rROMA_t_test)
plage_t_test
View(plage_t_test)
write.csv(plage_t_test,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_plage_t_test_results.png",
sep = "\t",
row.names = F)
write.table(plage_t_test,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_plage_t_test_results.png",
sep = "\t",
row.names = F)
write.table(plage_t_test,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_plage_t_test_results.tsv",
sep = "\t",
row.names = F)
write.table(plage_t_test,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_plage_t_test_results.tsv",
sep = "\t",
row.names = T)
write.table(gsva_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_gsva_t_test_results.tsv",
sep = "\t",
row.names = T,
row)
library(GSVA)
library(ggfortify)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
load(file="./Rehman_CF_NCF_RNA_exp_matrix_norm.rda")
load(file = "./Rehman_CF_NCF_sample_labels.rda")
sample_labels$Type <- gsub(x = sample_labels$Type,
pattern = "-",
replacement = "_")
sample_labels$CF_sample_id <- paste(sample_labels$Type,
rep(1:6, 2),
sep = " ")
CF_samples <- sample_labels %>%
filter(Type=="CF") %>%
pull(CF_sample_id)
non_CF_samples <- sample_labels %>%
filter(Type=="non_CF") %>%
pull(CF_sample_id)
non_CF_samples <- gsub(x = non_CF_samples,
pattern = "[_]",
replacement = "-")
expr.matrix <- as.matrix(MatData)
colnames(expr.matrix) <- sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
gsva_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
# Hallmark GMT
genesets <- GSEABase::getGmt("./h.all.v2023.1.Hs.symbols.gmt")
genesets_list <- lapply(genesets, function(geneset) {
return(geneset@geneIds)
})
names(genesets_list) <- lapply(genesets, function(geneset) {
geneset_name <- geneset@setName
geneset_name <- gsub(pattern = "HALLMARK_",
replacement = "",
x = geneset_name)
geneset_name <- gsub(pattern = "_",
replacement = " ",
x = geneset_name)
return(geneset_name)
})
gsva_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
colnames(gsva_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(gsva_output_df))
colnames(gsva_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(gsva_output_df))
gsva_heatmap <- pheatmap(gsva_output_df,
annotation_col = condition,
annotation_colors = condition_colors,
color = pal,
breaks = myBreaks,
border_color = "NA")
# Perform t-tests for each gene
gsva_t_test <- data.frame(t(apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
print(class(t_test_result))
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(gsva_t_test) <- c("statistic", "p.value")
gsva_t_test$statistic.abs <- abs(gsva_t_test$statistic)
gsva_t_test$adj.p.value <- p.adjust(gsva_t_test$p.value,
method = "fdr")
gsva_t_test <- gsva_t_test[order(gsva_t_test$statistic.abs, decreasing = T),]
write.table(gsva_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_gsva_t_test_results.tsv",
sep = "\t",
row.names = T,
row)
gsva_t_test[,c("statistic","adj.p.value")]
write.table(gsva_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_gsva_t_test_results.tsv",
sep = "\t",
row.names = T)
ssgsea_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
colnames(ssgsea_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(ssgsea_output_df))
colnames(ssgsea_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(ssgsea_output_df))
ssgsea_heatmap <- pheatmap(ssgsea_output_df,
annotation_col = condition,
annotation_colors = condition_colors,
color = pal,
breaks = myBreaks,
border_color = "NA")
# Perform t-tests for each gene
ssgsea_t_test <- data.frame(t(apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(ssgsea_t_test) <- c("statistic", "p.value")
ssgsea_t_test$statistic.abs <- abs(ssgsea_t_test$statistic)
ssgsea_t_test$adj.p.value <- p.adjust(ssgsea_t_test$p.value,
method = "fdr")
ssgsea_t_test <- ssgsea_t_test[order(ssgsea_t_test$statistic.abs, decreasing = T),]
write.table(ssgsea_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_ssgsea_t_test_results.tsv",
sep = "\t",
row.names = T)
write.table(zscore_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_zscore_t_test_results.tsv",
sep = "\t",
row.names = T)
zscore_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
colnames(zscore_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(zscore_output_df))
colnames(zscore_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(zscore_output_df))
zscore_mycolors <- colorRampPalette(brewer.pal(3, "RdBu"))(50)
zscore_pal <- colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "PiYG")))(100)
zscore_myBreaks <- seq(min(zscore_output_df), max(zscore_output_df), length.out = 100)
zscore_heatmap <- pheatmap(zscore_output_df,
annotation_col = condition,
annotation_colors = condition_colors,
color = zscore_pal,
breaks = zscore_myBreaks,
border_color = "NA")
# Perform t-tests for each gene
zscore_t_test <- data.frame(t(apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(zscore_t_test) <- c("statistic", "p.value")
zscore_t_test$statistic.abs <- abs(zscore_t_test$statistic)
zscore_t_test$adj.p.value <- p.adjust(zscore_t_test$p.value,
method = "fdr")
zscore_t_test <- zscore_t_test[order(zscore_t_test$statistic.abs, decreasing = T),]
write.table(zscore_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_zscore_t_test_results.tsv",
sep = "\t",
row.names = T)
rROMA_output_df <- read.table(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/rROMA_output_SampleMatrix_2023_09_19.csv",
sep = "\t")
colnames(rROMA_output_df) <- sapply(colnames(rROMA_output_df), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(rROMA_output_df) <- gsub(pattern = "_",
replacement = "-",
x = colnames(rROMA_output_df))
colnames(rROMA_output_df) <- gsub(pattern = "[.]",
replacement = " ",
x = colnames(rROMA_output_df))
rROMA_t_test <- data.frame(t(apply(X = rROMA_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(rROMA_t_test) <- c("statistic", "p.value")
rROMA_t_test$statistic.abs <- abs(rROMA_t_test$statistic)
rROMA_t_test$adj.p.value <- p.adjust(rROMA_t_test$p.value,
method = "fdr")
rROMA_t_test <- rROMA_t_test[order(rROMA_t_test$statistic.abs, decreasing = T),]
write.table(rROMA_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_CF_NCF_rROMA_t_test_results.tsv",
sep = "\t",
row.names = T)
load(file="./Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load(file ="./Rehman_IL17_TNFa_sample_labels.Rda")
Rehman_exp_coldata$Simple_id <- gsub(pattern = "_",
replacement = " ",
x = Rehman_exp_coldata$Simple_id)
colnames(Rehman_exp_RNA_matrix_norm) <- Rehman_exp_coldata$Simple_id
control_samples <- Rehman_exp_coldata %>%
filter(Treatment=="control") %>%
pull(Simple_id)
inf_samples <- Rehman_exp_coldata %>%
filter(Treatment=="IL-17+TNFa") %>%
pull(Simple_id)
plage_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="plage")
plage_output_df <- data.frame(plage_es)
colnames(plage_output_df) <- Rehman_exp_coldata$Simple_id
plage_heatmap <- pheatmap(plage_output_df,
annotation_col = condition,
annotation_colors = condition_colors,
color = pal,
breaks = myBreaks,
border_color = "NA")
# Perform t-tests for each gene
plage_t_test <- data.frame(t(apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
print(class(t_test_result))
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(plage_t_test) <- c("statistic", "p.value")
plage_t_test$statistic.abs <- abs(plage_t_test$statistic)
plage_t_test$adj.p.value <- p.adjust(plage_t_test$p.value,
method = "fdr")
plage_t_test <- plage_t_test[order(plage_t_test$statistic.abs, decreasing = T),]
write.table(plage_t_test,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_plage_t_test_results.tsv",
sep = "\t",
row.names = T,
row)
write.table(plage_t_test,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_plage_t_test_results.tsv",
sep = "\t",
row.names = T)
write.table(plage_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_plage_t_test_results.tsv",
sep = "\t",
row.names = T)
gsva_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
colnames(gsva_output_df) <- Rehman_exp_coldata$Simple_id
# Perform t-tests for each gene
gsva_t_test <- data.frame(t(apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
print(class(t_test_result))
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(gsva_t_test) <- c("statistic", "p.value")
gsva_t_test$statistic.abs <- abs(gsva_t_test$statistic)
gsva_t_test$adj.p.value <- p.adjust(gsva_t_test$p.value,
method = "fdr")
gsva_t_test <- gsva_t_test[order(gsva_t_test$statistic.abs, decreasing = T),]
write.table(gsva_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_gsva_t_test_results.tsv",
sep = "\t",
row.names = T)
ssgsea_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
colnames(ssgsea_output_df) <- Rehman_exp_coldata$Simple_id
ssgsea_heatmap <- pheatmap(ssgsea_output_df,
annotation_col = condition,
annotation_colors = condition_colors,
color = pal,
breaks = myBreaks,
border_color = "NA")
# Perform t-tests for each gene
ssgsea_t_test <- data.frame(t(apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(ssgsea_t_test) <- c("statistic", "p.value")
ssgsea_t_test$statistic.abs <- abs(ssgsea_t_test$statistic)
ssgsea_t_test$adj.p.value <- p.adjust(ssgsea_t_test$p.value,
method = "fdr")
ssgsea_t_test <- ssgsea_t_test[order(ssgsea_t_test$statistic.abs, decreasing = T),]
write.table(ssgsea_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_ssgsea_t_test_results.tsv",
sep = "\t",
row.names = T)
zscore_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
colnames(zscore_output_df) <- Rehman_exp_coldata$Simple_id
zscore_t_test <- data.frame(t(apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(c(t_test_result$statistic, t_test_result$p.value))
})))
colnames(zscore_t_test) <- c("statistic", "p.value")
zscore_t_test$statistic.abs <- abs(zscore_t_test$statistic)
zscore_t_test$adj.p.value <- p.adjust(zscore_t_test$p.value,
method = "fdr")
zscore_t_test <- zscore_t_test[order(zscore_t_test$statistic.abs, decreasing = T),]
write.table(zscore_t_test[,c("statistic","adj.p.value")],
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_zscore_t_test_results.tsv",
sep = "\t",
row.names = T)
length(which(plage_t_test$adj.p.value<0.05))
load(file="./Rehman_IL17_TNFa_rRoma_obj.Rdata")
rROMA_output_df <- rRoma.output$SampleMatrix
colnames(rROMA_output_df) <- gsub(pattern = "_",
replacement = " ",
x = colnames(rROMA_output_df))
rownames(rROMA_output_df) <- sapply(rownames(rROMA_output_df), function(geneset) {
geneset_name <- gsub(pattern = "HALLMARK_",
replacement = "",
x = geneset)
geneset_name <- gsub(pattern = "_",
replacement = " ",
x = geneset_name)
return(geneset_name)
})
View(rROMA_output_df)
rROMA_stat_outpout_df <- rRoma.output$ModuleMatrix
View(rROMA_stat_outpout_df)
rownames(rROMA_stat_outpout_df) <- sapply(rownames(rROMA_stat_outpout_df), function(geneset) {
geneset_name <- gsub(pattern = "HALLMARK_",
replacement = "",
x = geneset)
geneset_name <- gsub(pattern = "_",
replacement = " ",
x = geneset_name)
return(geneset_name)
})
write.table(rROMA_stat_outpout_df,
file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_rROMA_module_matrix.tsv",
sep = "\t",
row.names = T)
